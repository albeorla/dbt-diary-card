// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    diaryEntries  DiaryEntry[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// DBT Diary Card Models

model DiaryEntry {
    id             String          @id @default(cuid())
    userId         String
    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    entryDate      DateTime        @db.Date
    notes          String?
    emotionRatings EmotionRating[]
    urgesBehaviors UrgeBehavior[]
    skillsUsed     SkillUsed[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt

    @@unique([userId, entryDate])
}

model EmotionRating {
    id      String      @id @default(cuid())
    entryId String
    entry   DiaryEntry  @relation(fields: [entryId], references: [id], onDelete: Cascade)
    emotion EmotionType
    rating  Int         @db.SmallInt

    @@unique([entryId, emotion])
}

model UrgeBehavior {
    id        String      @id @default(cuid())
    entryId   String
    entry     DiaryEntry  @relation(fields: [entryId], references: [id], onDelete: Cascade)
    urgeType  UrgeType
    intensity Int         @db.SmallInt
    actedOn   Boolean     @default(false)

    @@unique([entryId, urgeType])
}

model SkillUsed {
    id      String      @id @default(cuid())
    entryId String
    entry   DiaryEntry  @relation(fields: [entryId], references: [id], onDelete: Cascade)
    skillId String
    skill   DBTSkill    @relation(fields: [skillId], references: [id])
    used    Boolean     @default(true)

    @@unique([entryId, skillId])
}

model DBTSkill {
    id          String        @id @default(cuid())
    module      SkillModule
    name        String
    description String?
    skillsUsed  SkillUsed[]

    @@unique([name, module], name: "name_module")
}

enum EmotionType {
    SADNESS
    ANGER
    FEAR
    SHAME
    JOY
    PRIDE
    LOVE
    GUILT
    ANXIETY
    DISGUST
}

enum UrgeType {
    SELF_HARM
    SUBSTANCE_USE
    BINGE_EATING
    RESTRICTING
    ISOLATING
    LASHING_OUT
    RUMINATING
}

enum SkillModule {
    MINDFULNESS
    DISTRESS_TOLERANCE
    EMOTION_REGULATION
    INTERPERSONAL_EFFECTIVENESS
}
