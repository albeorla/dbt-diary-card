name: E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  checks:
    name: Checks (format, typecheck, lint, build)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Format check
        run: npm run format:check
      - name: Typecheck
        run: npm run typecheck
      - name: Lint
        run: npm run lint
        env:
          SKIP_ENV_VALIDATION: '1'
          NODE_ENV: development
      - name: Build
        run: npm run build
        env:
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Select Database URL (Neon or local)
        run: |
          if [ -n "${{ secrets.NEON_DEV_DATABASE_URL }}" ]; then 
            echo "Using Neon dev database";
            echo "DATABASE_URL=${{ secrets.NEON_DEV_DATABASE_URL }}?schema=ci_${{ github.run_id }}" >> $GITHUB_ENV;
          else 
            echo "Using local Postgres service";
            echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/postgres?schema=public" >> $GITHUB_ENV;
          fi
      - name: Install dependencies
        run: npm ci
      - name: Build app
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DATABASE_URL_DIRECT: ${{ env.DATABASE_URL }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
        run: npm run build
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium
      - name: Generate Prisma Client
        run: npx prisma generate
      - name: Prepare Database (push schema + seed)
        env:
          DATABASE_URL_DIRECT: ${{ env.DATABASE_URL }}
        run: |
          echo "Using DB: $DATABASE_URL"
          npx prisma db push
          npm run db:seed --if-present
      - name: Run E2E
        env:
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DATABASE_URL_DIRECT: ${{ env.DATABASE_URL }}
          TEST_AUTH_SECRET: ${{ secrets.TEST_AUTH_SECRET }}
          CI: true
        run: npm run test:e2e -- --reporter=dot
